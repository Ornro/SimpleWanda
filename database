CREATE TABLE a3
(
  idwuser integer NOT NULL,
  name character varying,
  uri character varying,
  description text,
  CONSTRAINT a3_pkey PRIMARY KEY (idwuser)
);

CREATE TABLE containers
(
  table_name character varying NOT NULL,
  CONSTRAINT "Containers_pkey" PRIMARY KEY (table_name)
);

CREATE TABLE resolution
(
  idresolution serial NOT NULL,
  nom character varying,
  description text,
  CONSTRAINT resolution_pkey PRIMARY KEY (idresolution)
);

CREATE TABLE format
(
  idformat serial NOT NULL,
  nom character varying,
  extension character varying,
  CONSTRAINT format_pkey PRIMARY KEY (idformat)
);

CREATE TABLE type
(
  idtype serial NOT NULL,
  name character varying,
  description text,
  CONSTRAINT type_pkey PRIMARY KEY (idtype)
);

CREATE TABLE workflow
(
  idworkflow serial NOT NULL,
  name character varying,
  description character varying,
  CONSTRAINT workflow_pkey PRIMARY KEY (idworkflow)
);

CREATE TABLE metadata
(
  idmetadata serial NOT NULL,
  name character varying,
  description text,
  obligation boolean,
  CONSTRAINT metadata_pkey PRIMARY KEY (idmetadata)
);

CREATE TABLE metaconcerns
(
  idmetadata serial NOT NULL,
  concerns character varying NOT NULL,
  CONSTRAINT metaconcerns_pkey PRIMARY KEY (idmetadata, concerns),
  CONSTRAINT metaconcerns_idmetadata_fkey FOREIGN KEY (idmetadata)
      REFERENCES metadata (idmetadata) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE wuser
(
  idwuser serial NOT NULL,
  name character varying,
  forename character varying,
  mail character varying,
  role int NOT NULL,
  CONSTRAINT wuser_pkey PRIMARY KEY (idwuser)
);

CREATE INDEX wufk_role
  ON wuser
  USING btree
  (idwuser);
  
CREATE TABLE site
(
  idsite serial NOT NULL,
  name character varying,
  CONSTRAINT site_pkey PRIMARY KEY (idsite)
);


CREATE TABLE corpus
(
  idcorpus serial NOT NULL,
  _site integer,
  owner integer NOT NULL,
  _corpus integer,
  name character varying,
  CONSTRAINT corpus_pkey PRIMARY KEY (idcorpus),
  CONSTRAINT "CCFK" FOREIGN KEY (_corpus)
      REFERENCES corpus (idcorpus) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT corpus_owner_fkey FOREIGN KEY (owner)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT corpus_site_fkey FOREIGN KEY (_site)
      REFERENCES site (idsite) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX cfk_creator
  ON corpus
  USING btree
  (owner);

CREATE INDEX cfk_site
  ON corpus
  USING btree
  (_site);

CREATE INDEX "fki_CCFK"
  ON corpus
  USING btree
  (_corpus);

CREATE TABLE session
(
  idsession serial NOT NULL,
  _corpus integer NOT NULL,
  owner integer NOT NULL,
  name character varying,
  CONSTRAINT session_pkey PRIMARY KEY (idsession),
  CONSTRAINT session_corpus_fkey FOREIGN KEY (_corpus)
      REFERENCES corpus (idcorpus) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT session_owner_fkey FOREIGN KEY (owner)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX ssfk_corpus
  ON session
  USING btree
  (_corpus);

CREATE INDEX ssfk_creator
  ON session
  USING btree
  (owner);
  
CREATE TABLE montage
(
  idmontage serial NOT NULL,
  owner integer NOT NULL,
  _session integer,
  link character varying,
  name character varying,
  CONSTRAINT montage_pkey PRIMARY KEY (idmontage),
  CONSTRAINT montage_owner_fkey FOREIGN KEY (owner)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX mfk_owner
  ON montage
  USING btree
  (owner);


CREATE TABLE view
(
  idview serial NOT NULL,
  type integer NOT NULL,
  owner integer NOT NULL,
  _session integer NOT NULL,
  _montage integer,
  name character varying,
  CONSTRAINT view_pkey PRIMARY KEY (idview),
  CONSTRAINT "VMFK" FOREIGN KEY (_montage)
      REFERENCES montage (idmontage) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT view_session_fkey FOREIGN KEY (_session)
      REFERENCES session (idsession) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT view_type_fkey FOREIGN KEY (type)
      REFERENCES type (idtype) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT view_wuser_fkey FOREIGN KEY (owner)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX "fki_VMFK"
  ON view
  USING btree
  (_montage);

CREATE INDEX vwfk_owner
  ON view
  USING btree
  (owner);

CREATE INDEX vwfk_session
  ON view
  USING btree
  (_session);
  
CREATE TABLE video
(
  idvideo serial NOT NULL,
  workflow integer NOT NULL,
  _view integer NOT NULL,
  owner integer NOT NULL,
  name character varying,
  private boolean,
  CONSTRAINT video_pkey PRIMARY KEY (idvideo),
  CONSTRAINT video_view_fkey FOREIGN KEY (_view)
      REFERENCES view (idview) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT video_wuser_fkey FOREIGN KEY (owner)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT video_workflow_fkey FOREIGN KEY (workflow)
      REFERENCES workflow (idworkflow) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX vfk_owner
  ON video
  USING btree
  (owner);

CREATE INDEX vfk_view
  ON video
  USING btree
  (_view);


CREATE TABLE annotation
(
  idannotation serial NOT NULL,
  link character varying NOT NULL,
  workflow integer NOT NULL,
  owner integer NOT NULL,
  video integer,
  _view integer,
  name character varying,
  private boolean,
  CONSTRAINT annotation_pkey PRIMARY KEY (idannotation),
  CONSTRAINT "AVFK" FOREIGN KEY (video)
      REFERENCES video (idvideo) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT "AVWFK" FOREIGN KEY (_view)
      REFERENCES view (idview) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT annotation_owner_fkey FOREIGN KEY (owner)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT annotation_workflow_fkey FOREIGN KEY (workflow)
      REFERENCES workflow (idworkflow) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX afk_owner
  ON annotation
  USING btree
  (owner);

CREATE INDEX "fki_AVFK"
  ON annotation
  USING btree
  (video);

CREATE INDEX "fki_AVWFK"
  ON annotation
  USING btree
  (_view);

  CREATE TABLE concretevideo
(
  video integer NOT NULL,
  resolution integer NOT NULL,
  format integer NOT NULL,
  link character varying,
  CONSTRAINT concretevideo_pkey PRIMARY KEY (video, resolution, format),
  CONSTRAINT concretevideo_format_fkey FOREIGN KEY (format)
      REFERENCES format (idformat) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT concretevideo_resolution_fkey FOREIGN KEY (resolution)
      REFERENCES resolution (idresolution) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT concretevideo_video_fkey FOREIGN KEY (video)
      REFERENCES video (idvideo) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX cvfk_video
  ON concretevideo
  USING btree
  (video);
  
  CREATE TABLE viewmeta
(
  view integer NOT NULL,
  metadata integer NOT NULL,
  content text,
  CONSTRAINT viewmeta_pkey PRIMARY KEY (view, metadata),
  CONSTRAINT viewmeta_metadata_fkey FOREIGN KEY (metadata)
      REFERENCES metadata (idmetadata) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT viewmeta_view_fkey FOREIGN KEY (view)
      REFERENCES view (idview) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX vwmfk_meta
  ON viewmeta
  USING btree
  (metadata);

CREATE INDEX vwmfk_view
  ON viewmeta
  USING btree
  (view);
  
  CREATE TABLE videometa
(
  video integer NOT NULL,
  metadata integer NOT NULL,
  content text,
  CONSTRAINT videometa_pkey PRIMARY KEY (metadata, video),
  CONSTRAINT videometa_metadata_fkey FOREIGN KEY (metadata)
      REFERENCES metadata (idmetadata) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT videometa_video_fkey FOREIGN KEY (video)
      REFERENCES video (idvideo) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX vidmfk_meta
  ON videometa
  USING btree
  (metadata);

CREATE INDEX vidmfk_view
  ON videometa
  USING btree
  (video);
  
  CREATE TABLE sitemeta
(
  site integer NOT NULL,
  metadata integer NOT NULL,
  content text,
  CONSTRAINT sitemeta_pkey PRIMARY KEY (site, metadata),
  CONSTRAINT sitemeta_metadata_fkey FOREIGN KEY (metadata)
      REFERENCES metadata (idmetadata) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT sitemeta_site_fkey FOREIGN KEY (site)
      REFERENCES site (idsite) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX smfk_meta
  ON sitemeta
  USING btree
  (metadata);

CREATE INDEX smfk_site
  ON sitemeta
  USING btree
  (site);
  
  
  CREATE TABLE sessionmeta
(
  session integer NOT NULL,
  metadata integer NOT NULL,
  content text,
  CONSTRAINT sessionmeta_pkey PRIMARY KEY (session, metadata),
  CONSTRAINT sessionmeta_metadata_fkey FOREIGN KEY (metadata)
      REFERENCES metadata (idmetadata) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT sessionmeta_session_fkey FOREIGN KEY (session)
      REFERENCES session (idsession) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX ssmfk_meta
  ON sessionmeta
  USING btree
  (metadata);

CREATE INDEX ssmfk_session
  ON sessionmeta
  USING btree
  (session);
  
  CREATE TABLE montagemeta
(
  montage integer NOT NULL,
  metadata integer NOT NULL,
  content text,
  CONSTRAINT montagemeta_pkey PRIMARY KEY (montage, metadata),
  CONSTRAINT montagemeta_metadata_fkey FOREIGN KEY (metadata)
      REFERENCES metadata (idmetadata) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT montagemeta_montage_fkey FOREIGN KEY (montage)
      REFERENCES montage (idmontage) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX mmfk_metadata
  ON montagemeta
  USING btree
  (metadata);

CREATE INDEX mmfk_montage
  ON montagemeta
  USING btree
  (montage);
  
  
CREATE TABLE corpusmeta
(
  corpus integer NOT NULL,
  metadata integer NOT NULL,
  content text,
  CONSTRAINT corpusmeta_pkey PRIMARY KEY (corpus, metadata),
  CONSTRAINT corpusmeta_corpus_fkey FOREIGN KEY (corpus)
      REFERENCES corpus (idcorpus) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT corpusmeta_metadata_fkey FOREIGN KEY (metadata)
      REFERENCES metadata (idmetadata) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX cmfk_corpus
  ON corpusmeta
  USING btree
  (corpus);


CREATE INDEX cmfk_meta
  ON corpusmeta
  USING btree
  (metadata);

  CREATE TABLE annotationmeta
(
  annotation integer NOT NULL,
  metadata integer NOT NULL,
  content text,
  CONSTRAINT annotationmeta_pkey PRIMARY KEY (metadata, annotation),
  CONSTRAINT annotationmeta_annotation_fkey FOREIGN KEY (annotation)
      REFERENCES annotation (idannotation) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT annotationmeta_metadata_fkey FOREIGN KEY (metadata)
      REFERENCES metadata (idmetadata) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX annotmfk_corpus
  ON annotationmeta
  USING btree
  (annotation);

CREATE INDEX annotmfk_meta
  ON annotationmeta
  USING btree
  (metadata);

CREATE TABLE wuserannotationaccess
(
  wuser integer NOT NULL,
  annotation integer NOT NULL,
  rights integer NOT NULL,
  CONSTRAINT wuserannotationaccess_pkey PRIMARY KEY (wuser, annotation),
  CONSTRAINT wuserannotationaccess_annotation_fkey FOREIGN KEY (annotation)
      REFERENCES annotation (idannotation) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT wuserannotationaccess_wuser_fkey FOREIGN KEY (wuser)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX uaafk_annotation
  ON wuserannotationaccess
  USING btree
  (annotation);

CREATE INDEX uaafk_wuser
  ON wuserannotationaccess
  USING btree
  (wuser);
  
  CREATE TABLE wusercorpusaccess
(
  wuser integer NOT NULL,
  corpus integer NOT NULL,
  rights integer NOT NULL,
  CONSTRAINT wusercorpusaccess_pkey PRIMARY KEY (wuser, corpus),
  CONSTRAINT wusercorpusaccess_corpus_fkey FOREIGN KEY (corpus)
      REFERENCES corpus (idcorpus) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT wusercorpusaccess_wuser_fkey FOREIGN KEY (wuser)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX ucafk_corpus
  ON wusercorpusaccess
  USING btree
  (corpus);

CREATE INDEX ucafk_wuser
  ON wusercorpusaccess
  USING btree
  (wuser);

  
  
CREATE TABLE wusermontageaccess
(
  wuser integer NOT NULL,
  montage integer NOT NULL,
  rights integer NOT NULL,
  CONSTRAINT wusermontageaccess_pkey PRIMARY KEY (wuser, montage),
  CONSTRAINT wusermontageaccess_view_fkey FOREIGN KEY (montage)
      REFERENCES montage (idmontage) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT wusermontageaccess_wuser_fkey FOREIGN KEY (wuser)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX umoafk_view
  ON wusermontageaccess
  USING btree
  (montage);

CREATE INDEX umoafk_wuser
  ON wusermontageaccess
  USING btree
  (wuser);
  
  
CREATE TABLE wusersessionaccess
(
  wuser integer NOT NULL,
  session integer NOT NULL,
  rights integer NOT NULL,
  CONSTRAINT wusersessionaccess_pkey PRIMARY KEY (wuser, session),
  CONSTRAINT wusersessionaccess_session_fkey FOREIGN KEY (session)
      REFERENCES session (idsession) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT wusersessionaccess_wuser_fkey FOREIGN KEY (wuser)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX ussafk_session
  ON wusersessionaccess
  USING btree
  (session);

CREATE INDEX ussafk_wuser
  ON wusersessionaccess
  USING btree
  (wuser);

  
CREATE TABLE wusersiteaccess
(
  wuser integer NOT NULL,
  site integer NOT NULL,
  rights integer NOT NULL,
  CONSTRAINT wusersiteaccess_pkey PRIMARY KEY (wuser, site),
  CONSTRAINT wusersiteaccess_site_fkey FOREIGN KEY (site)
      REFERENCES site (idsite) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT wusersiteaccess_wuser_fkey FOREIGN KEY (wuser)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX usafk_site
  ON wusersiteaccess
  USING btree
  (site);

CREATE INDEX usafk_wuser
  ON wusersiteaccess
  USING btree
  (wuser);



CREATE TABLE wuservideoaccess
(
  wuser integer NOT NULL,
  video integer NOT NULL,
  rights integer NOT NULL,
  lastaccess date,
  CONSTRAINT wuservideoaccess_pkey PRIMARY KEY (wuser, video),
  CONSTRAINT wuservideoaccess_video_fkey FOREIGN KEY (video)
      REFERENCES video (idvideo) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT wuservideoaccess_wuser_fkey FOREIGN KEY (wuser)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX uvafk_video
  ON wuservideoaccess
  USING btree
  (video);

CREATE INDEX uvafk_wuser
  ON wuservideoaccess
  USING btree
  (wuser);

CREATE TABLE wuserviewaccess
(
  wuser integer NOT NULL,
  view integer NOT NULL,
  rights integer NOT NULL,
  CONSTRAINT wuserviewaccess_pkey PRIMARY KEY (wuser, view),
  CONSTRAINT wuserviewaccess_view_fkey FOREIGN KEY (view)
      REFERENCES view (idview) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT wuserviewaccess_wuser_fkey FOREIGN KEY (wuser)
      REFERENCES wuser (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX uvwafk_view
  ON wuserviewaccess
  USING btree
  (view);

CREATE INDEX uvwafk_wuser
  ON wuserviewaccess
  USING btree
  (wuser);

CREATE TABLE a3videoaccess
(
  a3 integer NOT NULL,
  rights integer,
  video integer NOT NULL,
  CONSTRAINT a3va PRIMARY KEY (a3, video),
  CONSTRAINT a3a3fk FOREIGN KEY (a3)
      REFERENCES a3 (idwuser) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT a3vfk FOREIGN KEY (video)
      REFERENCES video (idvideo) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE INDEX a3vafk_view
  ON a3videoaccess
  USING btree
  (a3);

CREATE INDEX a3vafk_wuser
  ON a3videoaccess
  USING btree
  (video);


